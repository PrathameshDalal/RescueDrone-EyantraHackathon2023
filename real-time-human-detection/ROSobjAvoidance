#!/usr/bin/env python

import rospy
import math
import numpy as np
from sensor_msgs.msg import LaserScan
from geometry_msgs.msg import Twist
from tf.transformations import euler_from_quaternion

class PID:
    def __init__(self, p=0.0, i=0.0, d=0.0, set_point=0.0, windup_guard=20.0):
        self.Kp = p
        self.Ki = i
        self.Kd = d
        self.set_point = set_point
        self.windup_guard = windup_guard

        self.last_error = 0.0
        self.integral = 0.0

    def update(self, feedback_value, dt):
        error = self.set_point - feedback_value
        self.integral += error * dt

        if self.integral < -self.windup_guard:
            self.integral = -self.windup_guard
        elif self.integral > self.windup_guard:
            self.integral = self.windup_guard

        derivative = (error - self.last_error) / dt
        output = self.Kp * error + self.Ki * self.integral + self.Kd * derivative

        self.last_error = error

        return output


class ScanAndControl:
    def __init__(self):
        # Initialize ROS node
        rospy.init_node('scan_and_control')

        # Initialize PID controllers for altitude and heading
        self.altitude_pid = PID(p=0.5, i=0.01, d=0.1)
        self.heading_pid = PID(p=1.0, i=0.01, d=0.1)

        # Initialize laser scan data
        self.laser_scan = LaserScan()
        self.min_scan_angle = -math.pi / 4  # minimum scan angle (radians)
        self.max_scan_angle = math.pi / 4   # maximum scan angle (radians)

        # Initialize control commands
        self.twist = Twist()

        # Initialize ROS publishers and subscribers
        self.cmd_vel_pub = rospy.Publisher('/cmd_vel', Twist, queue_size=1)
        self.scan_sub = rospy.Subscriber('/scan', LaserScan, self.scan_callback)

        # Spin ROS node
        rospy.spin()

    def scan_callback(self, data):
        # Store laser scan data
        self.laser_scan = data

        # Calculate minimum range in specified scan angle
        min_range = np.inf
        min_range_idx = None
        for i, r in enumerate(data.ranges):
            if self.min_scan_angle <= data.angle_min + i * data.angle_increment <= self.max_scan_angle:
                if r < min_range:
                    min_range = r
                    min_range_idx = i

        # If obstacle detected, adjust heading and altitude
        if min_range_idx is not None:
            # Calculate heading error
            heading_error = (data.angle_min + min_range_idx * data.angle_increment) / 2

            # Apply PID controller to heading error
            heading_command = self.heading_pid.update(heading_error)

            # Calculate altitude error
            altitude_error = min_range - 2.0

            # Apply PID controller to altitude error
            altitude_command = self.altitude_pid.update(altitude_error)

            # Set control commands
            self.twist.linear.x = 0.2
            self.twist.linear.y = 0.0
            self.twist.linear.z = altitude_command
            self.twist.angular.x = 0.0
            self.twist.angular.y = 0.0
            self.twist.angular.z = heading_command

            # Publish control commands
            self.cmd_vel_pub.publish(self.twist)
        else:
            # No obstacle detected, fly forward
            self.twist.linear.x = 0.2
            self.twist.linear.y = 0.0
            self.twist.linear.z = 0.0
            self.twist.angular.x = 0.0
            self.twist.angular.y = 0.0
            self.twist.angular.z = 0.0

            # Publish control commands
            self.cmd_vel_pub.publish(self.twist)

if __name__ == '__main__':
    try:
        ScanAndControl()
    except rospy.ROSInterruptException:
        pass
